- hosts: all
  vars:
    AcceptEnv:
      - VAULT_*
      - AWS_*
    docker_compose: 1.25.4
    asdf: ~/.asdf/bin/asdf
    asdf_plugins:
      - name: helm
        ver: 3.1.1
      - name: kubectl
        ver: 1.17.3
      - name: nomad
        ver: 0.10.4
      - name: terraform
        ver: 0.12.21
      - name: terragrunt
        ver: 0.22.4
      - name: vault
        ver: 1.3.0
      - name: k9s
        ver: 0.16.1
    pip2_deps:
      - j2
    docker_deps:
      - docker-ce
      - docker-ce-cli
      - amazon-ecr-credential-helper
    os_deps:
      - apt-transport-https
      - ca-certificates
      - curl
      - software-properties-common
      - awscli
      - jq
      - python3-pip
      - python-pip
      - direnv
      - openvpn
      - openvpn-systemd-resolved

  handlers:
    - name: daemon reload
      become: yes
      systemd:
        daemon_reload: yes
    - name: restart systemd-resolved
      become: yes
      systemd:
        name: systemd-resolved
        state: restarted
        enabled: yes
    - name: restart openvpn
      become: yes
      systemd:
        name: openvpn-client@vagrant
        state: restarted
        enabled: yes
    - name: restart sshd
      become: yes
      systemd:
        name: sshd
        state: restarted
        enabled: yes
    - name: sleep for openvpn
      wait_for:
        timeout: 30
    - name: direnv allow
      command: direnv allow ~/.envrc
  tasks:
    - name: install os deps
      become: yes
      apt:
        name: "{{ os_deps }}"
        state: latest

    - name: import docker tasks
      import_tasks: provide_docker.yml

    - name: allow sending some shell variables
      become: yes
      notify:
        - restart sshd
      lineinfile:
        path: /etc/ssh/sshd_config
        regexp: '^AcceptEnv LANG LC_\*$'
        line: "AcceptEnv LANG LC_* {{ AcceptEnv | join(' ') }}"

    - name: make openvpn always restart
      become: yes
      notify:
        - daemon reload
      lineinfile:
        path: /lib/systemd/system/openvpn-client@.service
        insertafter: '^\[Service\]$'
        regexp: '^Restart=always$'
        line: 'Restart=always'

    - name: make openvpn always restart
      become: yes
      notify:
        - daemon reload
      lineinfile:
        path: /lib/systemd/system/openvpn-client@.service
        insertafter: '^\[Service\]$'
        regexp: '^RestartSec=$'
        line: 'RestartSec=5'
    - name: make openvpn always restart
      become: yes
      notify:
        - daemon reload
      lineinfile:
        path: /lib/systemd/system/openvpn-client@.service
        insertafter: '^\[Service\]$'
        regexp: '^StartLimitInterval=$'
        line: 'StartLimitInterval=0'

    - name: copy openvpn client conf
      become: yes
      notify:
        - restart openvpn
        - sleep for openvpn
      copy:
        src: client.ovpn
        dest: /etc/openvpn/client/vagrant.conf

    - name: disable DNSSEC for systemd-resolved because systemd is epiko
      become: yes
      notify:
        - restart systemd-resolved
      lineinfile:
        path: /etc/systemd/resolved.conf
        regexp: '^DNSSEC=yes$'
        line: 'DNSSEC=no'

    - name: create environment
      become: vagrant
      block:
      - name: set ~/.ssh/config defaults
        template:
          src: home/vagrant/.ssh/config
          dest: ~/.ssh/config
      - name: create user service dir
        file:
          name: ~/.config/systemd/user
          state: directory
      - name: render ssh-agent user service
        template:
          src: home/vagrant/.config/systemd/user/ssh-agent.service
          dest: ~/.config/systemd/user/ssh-agent.service
      - name: enable user service for ssh-agent
        systemd:
          name: ssh-agent
          scope: user
          state: started
          enabled: yes
          daemon-reload: yes

      - name: SSH_AUTH_SOCK shell variable
        lineinfile:
          path: ~/.bashrc
          line: 'export SSH_AUTH_SOCK="$XDG_RUNTIME_DIR/ssh-agent.socket"'


      - name: extend PATH
        lineinfile:
          path: ~/.bashrc
          line: 'export PATH=$PATH:/vagrant/bin'

      - name: install pip deps
        pip:
          name: "{{ pip2_deps }}"
          executable: pip2

      - name: clone asdf
        git:
          repo: https://github.com/asdf-vm/asdf
          dest: ~/.asdf
          version: v0.7.6

      - name: hook asdf context into shell
        lineinfile:
          path: ~/.bashrc
          regexp: '^\. ~/.asdf/asdf.sh$'
          line: '. ~/.asdf/asdf.sh'

      - name: load asdf shell completions
        lineinfile:
          path: ~/.bashrc
          regexp: '^\. ~/.asdf/completions/asdf.bash$'
          line: '. ~/.asdf/completions/asdf.bash'

      - name: install asdf pugins
        when: asdf_tools
        shell: |
          {{asdf}} plugin-add {{item.name}}
          {{asdf}} install {{item.name}} {{item.ver}}
          {{asdf}} global {{item.name}} {{item.ver}}
          {{asdf}} reshim {{item.name}} {{item.ver}}
        args:
          executable: /bin/bash
        environment:
          ASDF_DIR: /home/vagrant/.asdf
        loop: "{{ asdf_plugins }}"
        register: cmd
        failed_when: cmd.rc != 0

      - name: create a vaultified direnv .envrc for vagrant
        notify:
          - direnv allow
        template:
          src: home/vagrant/.envrc
          dest: ~/.envrc
      - name: enable direnv hooks
        lineinfile:
          path: ~/.bashrc
          regexp: '^eval "$(direnv hook bash)"$'
          line: 'eval "$(direnv hook bash)"'

      - name: copy .aliases
        copy:
          src: .aliases
          dest: ~/.aliases
      - name: hook aliases file
        lineinfile:
          path: ~/.bashrc
          regexp: '^. ~/.aliases$'
          line: '. ~/.aliases'
